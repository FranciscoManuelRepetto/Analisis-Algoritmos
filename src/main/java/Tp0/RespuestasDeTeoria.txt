2. Repaso de Algoritmia

1. Realiza detenidamente una traza al siguiente programa y muestra cual ser ıa la salida por
pantalla:

ALGORITMO ej1
	VARIABLES
	suma i,j: ENTERO
	PARA i <-- 1 HASTA 4 HACER
		PARA j <--3 HASTA 0 PASO -1 HACER
			suma <-- i*10+j
			escribir(suma)
		FIN PARA
	FIN PARA
FIN ALGORITMO


TRAZA
i = 1 -> 2 -> 3 -> 4
j = 3 -> 2 -> 1 -> 0
suma = 13 -> 22 -> 31 -> 40

2. ¿Que imprime el siguiente programa? ´
1 class Ejercicio {
2 	public static void main (String [] args){
3 		char [] matriz ={’e’,’u’,’o’,’i’,’a’};
4 		metodo(matriz);
5 		for (int i = 0;i<matriz.length;i++){
6 			System.out.print(matriz[i];
7 		}
8 	}
9
2
10 	public static void metodo (char [] vocales){
11 		char aux;
12
13 		for (int i=1;i<vocales.length;i++){
14 			if (vocales[i-1]>vocales[i]){
15 				aux=vocales[i-1];
16 				vocales[i-1]=vocales[i];
17 				vocales[i]=aux;
18 			}
19 		}
20 	}
21 }

Traza:
MAIN:
matriz = {’e’,’u’,’o’,’i’,’a’} ->  {’e’,’o’,’i’,’a’,’u’}
i = 0 -> 1 -> 2 -> 3 -> 4

METODO
vocales = {’e’,’u’,’o’,’i’,’a’} -> {’e’,’o’,’u’,’i’,’a’} -> {’e’,’o’,’i’,’u’,’a’} -> {’e’,’o’,’i’,’a’,’u’}
i = 1 -> 2 -> 3 -> 4
aux = u -> u ->u

Imprime: 
e
o
i
a
u

Ejercicio 5: Suponiendo n ≤ 1000000 y un usuario que siga de forma optima la logica del juego y que 
quiera dar la menor cantidad de pasos hasta adivinar el numero: ¿Cual es el maximo numero
de intentos que puede necesitar el jugador hasta encontrar un numero dentro del intervalo? 

La forma mas optima es divir al numero en 2 y dependiendo de la respuesta, dividir por 2. Por ejemplo: 1.000.000 preguntas si n es 500.000 si es menor entonces preguntas 250.000. Por lo tanto, el maximo numero de intentos que puede necesitar el jugador hasta encontrar un numero es de 20 pasos

Ejercicio7: Al ordenar una lista de numeros enteros aplicando el algoritmo quicksort, como pivote se elige el primer elemento de la lista. ¿que pasarıa si se selecciona otro pivote?

Al seleccionar diferentes elementos como pivote en el algoritmo de ordenamiento QuickSort, se pueden tener resultados variados en términos de eficiencia y número de operaciones realizadas. La elección del pivote afecta el rendimiento del algoritmo, ya que determina cómo se divide la lista en subconjuntos y cuántas comparaciones y movimientos se requieren.

Si seleccionas el primer elemento de la lista como pivote en QuickSort, es posible que enfrentes el peor caso de rendimiento cuando la lista ya esté ordenada o esté casi ordenada. Esto sucede porque en cada iteración del algoritmo, el pivote (primer elemento) se comparará con los elementos restantes, y en un escenario ya ordenado, se producirían particiones muy desequilibradas.

Ejercicio8: Resolver el siguiente problema escolar. Dadas las notas de los alumnos de un colegio en el primer curso de bachillerato, en las diferentes asignaturas (5 por comodidad) se desea:

a) Calcular la media de cada alumno.
media alumno= (nota1+not2+nota3+nota4+nota5)/5

b)  Calcular la media de cada asignatura.
mediaAsignatura= (notaAlumnoAsignatura1+notaAlumnoAsignatura2+notaAlumnoAsignatura3+...+notaAlumnoAsignaturaN)/cantAlumnos 

c) Calcular la media total de la clase
mediaClase= (mediaAlumno1+mediaAlumno2+...+mediaAlumnoN) /cantAlumnos

d) Ordenar el listado de los alumnos por orden decreciente de notas medias individuales,
que incluyen todas las materias.
Nota: Utilizar dos algoritmos de ordenacion diferentes para resolver el problema, justificando la eleccion. Generar los casos de prueba antes de hacer el ejercicio.
VER

9. Se leen dos listas de numeros enteros,  A y B de 100 y 60 elementos, respectivamente. Se desea resolver mediante procedimientos las siguientes tareas:
a) Ordenar aplicando un metodo de ordenacion distinto a cada una de las listas A y B
b) Crear una lista C a partir de la mezcla de las listas A y B ya ordenadas.
c) Mostrar la lista C
